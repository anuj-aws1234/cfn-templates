AWSTemplateFormatVersion: 2010-09-09
Description: >-
  base_network.template - Base VPC, Network, and NAT gateways.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Parameters:
          - AvailabilityZoneCount
          - CIDRRange
          - CustomAZList
          - PrivateSubnetAZ1
          - PrivateSubnetAZ2
          - PrivateSubnetAZ3
          - PublicSubnetAZ1
          - PublicSubnetAZ2
          - PublicSubnetAZ3
          - SecondaryCIDRRange
        Label:
          default: Network Configuration
      - Parameters:
          - Environment
        Label:
          default: Basic Configuration
      - Parameters:
          - CustomDNSList
          - CustomDomainName
        Label:
          default: DHCP Option Set parameters
      - Parameters:
          - InstanceTenancy
        Label:
          default: EC2 Configuration
    ParameterLabels:
      CustomAZList:
        default: Custom AZ List
      CIDRRange:
        default: What should VPC CIDR Range be?
      SecondaryCIDRRange:
        default: Secondary VPC CIDR Range
  Jetstream:
    Commit: 439652479fcb78fd11bddbec1290070993dc6cb0
    Date: '2019-06-27 18:06'
Parameters:
  AvailabilityZoneCount:
    Default: '2 AZs :: 4 Subnets'
    ConstraintDescription: Must be either 2 or 3.
    Type: String
    Description: Number of Availability Zones (3 AZs needs a use case)
    AllowedValues:
      - '1 AZ :: 2 Subnets'
      - '2 AZs :: 4 Subnets'
      - '3 AZs :: 6 Subnets'
  CustomAZList:
    Default: ''
    Type: CommaDelimitedList
    Description: >-
      Ordered list of Availability Zones to use for the VPC.  If not provided,
      the full AZ list for the region is used. (OPTIONAL)
  CIDRRange:
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
    Description: 'The IP address space to be used for this VPC, in CIDR notation'
    Default: 172.18.0.0/19
    MinLength: '9'
    AllowedPattern: >-
      ^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/[0-9]{1,2}$
    MaxLength: '18'
    Type: String
  SecondaryCIDRRange:
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x between /16 and /28
    Description: >-
      The secondary IP address space to be used for this VPC, in CIDR notation. 
      (OPTIONAL)
    Default: ''
    AllowedPattern: >-
      ^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/[0-9]{1,2}$||^$
    MaxLength: '18'
    Type: String
  Environment:
    AllowedValues:
      - Development
      - Integration
      - PreProduction
      - Production
      - QA
      - Staging
      - Test
    Default: Development
    Description: >-
      Application environment for which this network is being created. e.g.
      Development/Production.
    Type: String
  InstanceTenancy:
    Default: default
    Type: String
    Description: >-
      VPC default for single tenant (dedicated) vs multi-tenant (default)
      hypervisor. Overrides instance level tenancy option.
    AllowedValues:
      - default
      - dedicated
    ConstraintDescription: >-
      Must be either 'default' for multi-tenant hypervisor or 'dedicated' for
      single tenant hypervisor.
  VPNGateway:
    Default: 'False'
    Type: String
    Description: >-
      Creates a virtual private gateway. A virtual private gateway is the
      VPC-side endpoint for your VPN connection.
    AllowedValues:
      - 'True'
      - 'False'
  SpokeVpc:
    Default: 'False'
    Type: String
    Description: Is this VPN Gateway a spoke of a Transit VPC. (OPTIONAL)
    AllowedValues:
      - 'True'
      - 'False'
  CustomDNSList:
    Default: AmazonProvidedDNS
    Type: CommaDelimitedList
    Description: >-
      List of DNS Servers to use for the VPC.  'AmazonProvidedDNS' can be used
      to reference the AWS provided DNS servers. (OPTIONAL)
  CustomDomainName:
    Default: ''
    Type: String
    Description: >-
      The custom Domain name to use for the VPC.  Leave blank to use the default
      generated domain name.  (OPTIONAL)
  PrivateSubnetAZ1:
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
    Description: Private IP subnet used for AZ1.  Default "172.18.0.0/22"
    Default: 172.18.0.0/22
    MinLength: '9'
    AllowedPattern: >-
      ^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/[0-9]{1,2}$
    MaxLength: '18'
    Type: String
  PublicSubnetAZ1:
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
    Description: Public IP subnet used for AZ1.  Default "172.18.16.0/22"
    Default: 172.18.16.0/22
    MinLength: '9'
    AllowedPattern: >-
      ^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/[0-9]{1,2}$
    MaxLength: '18'
    Type: String
  PrivateSubnetAZ2:
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
    Description: Private IP subnet used for AZ2.  Default "172.18.4.0/22"
    Default: 172.18.4.0/22
    MinLength: '9'
    AllowedPattern: >-
      ^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/[0-9]{1,2}$
    MaxLength: '18'
    Type: String
  PublicSubnetAZ2:
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
    Description: Public IP subnet used for AZ2.  Default "172.18.20.0/22"
    Default: 172.18.20.0/22
    MinLength: '9'
    AllowedPattern: >-
      ^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/[0-9]{1,2}$
    MaxLength: '18'
    Type: String
  PrivateSubnetAZ3:
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
    Description: (Conditional) Private IP subnet used for AZ3.  Default "172.18.8.0/22"
    Default: 172.18.8.0/22
    MinLength: '9'
    AllowedPattern: >-
      ^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/[0-9]{1,2}$
    MaxLength: '18'
    Type: String
  PublicSubnetAZ3:
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
    Description: (Conditional) Public IP subnet used for AZ3.  Default "172.18.24.0/22"
    Default: 172.18.24.0/22
    MinLength: '9'
    AllowedPattern: >-
      ^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/[0-9]{1,2}$
    MaxLength: '18'
    Type: String
Conditions:
  Create3AZs: !Equals 
    - !Ref AvailabilityZoneCount
    - '3 AZs :: 6 Subnets'
  Create2AZs: !Not 
    - !Equals 
      - !Ref AvailabilityZoneCount
      - '1 AZ :: 2 Subnets'
  CreateVPNGateway: !Equals 
    - !Ref VPNGateway
    - 'True'
  SetCustomAZ: !Not 
    - !Equals 
      - !Select 
        - '0'
        - !Ref CustomAZList
      - ''
  SetCustomDNS: !Not 
    - !Equals 
      - !Select 
        - '0'
        - !Ref CustomDNSList
      - ''
  SetCustomDomainName: !Not 
    - !Equals 
      - !Ref CustomDomainName
      - ''
  SetSecondaryCIDR: !Not 
    - !Equals 
      - !Ref SecondaryCIDRRange
      - ''
  InUsEast1: !Equals 
    - !Ref 'AWS::Region'
    - us-east-1
Resources:
  VPNGatewayResource:
    Properties:
      Type: ipsec.1
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub '${AWS::StackName}VPC'
        - Key: 'transitvpc:spoke'
          Value: !Ref SpokeVpc
    Type: 'AWS::EC2::VPNGateway'
    Condition: CreateVPNGateway
  VPNRoutePropagation:
    Properties:
      RouteTableIds:
        - !Ref RouteTablePublic
        - !Ref RouteTablePrivateAZ1
        - !Ref RouteTablePrivateAZ2
        - !If 
          - Create3AZs
          - !Ref RouteTablePrivateAZ3
          - !Ref 'AWS::NoValue'
      VpnGatewayId: !Ref VPNGatewayResource
    Type: 'AWS::EC2::VPNGatewayRoutePropagation'
    DependsOn: VGAVPNGatewayResource
    Condition: CreateVPNGateway
  VPCBase:
    Properties:
      EnableDnsSupport: 'true'
      CidrBlock: !Ref CIDRRange
      EnableDnsHostnames: 'true'
      InstanceTenancy: !Ref InstanceTenancy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub '${AWS::StackName}VPC'
        - Key: Name
          Value: base_network_raju
    Type: 'AWS::EC2::VPC'
  SecondaryVPCCidrBlock:
    Properties:
      CidrBlock: !Ref SecondaryCIDRRange
      VpcId: !Ref VPCBase
    Type: 'AWS::EC2::VPCCidrBlock'
    Condition: SetSecondaryCIDR
  IGWBase:
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub '${AWS::StackName}IGW'
    Type: 'AWS::EC2::InternetGateway'
  VGAIGWBase:
    Properties:
      VpcId: !Ref VPCBase
      InternetGatewayId: !Ref IGWBase
    Type: 'AWS::EC2::VPCGatewayAttachment'
  VGAVPNGatewayResource:
    Properties:
      VpcId: !Ref VPCBase
      VpnGatewayId: !Ref VPNGatewayResource
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Condition: CreateVPNGateway
  RouteTablePublic:
    Properties:
      VpcId: !Ref VPCBase
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub '${AWS::StackName}PublicRT'
    Type: 'AWS::EC2::RouteTable'
  RoutePublicDefault:
    Properties:
      GatewayId: !Ref IGWBase
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RouteTablePublic
    Type: 'AWS::EC2::Route'
    DependsOn: VGAIGWBase
  DhcpOptions:
    Properties:
      DomainName: !If 
        - SetCustomDomainName
        - !Ref CustomDomainName
        - !If 
          - InUsEast1
          - ec2.internal
          - !Sub '${AWS::Region}.compute.internal'
      DomainNameServers: !If 
        - SetCustomDNS
        - !Ref CustomDNSList
        - - AmazonProvidedDNS
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub '${AWS::StackName}DHCPOptionSet'
    Type: 'AWS::EC2::DHCPOptions'
  VPCDHCPOptionsAssociation:
    Properties:
      VpcId: !Ref VPCBase
      DhcpOptionsId: !Ref DhcpOptions
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
  PrivateNetAZ1:
    Properties:
      VpcId: !Ref VPCBase
      AvailabilityZone: !Select 
        - '0'
        - !If 
          - SetCustomAZ
          - !Ref CustomAZList
          - !GetAZs 
            Ref: 'AWS::Region'
      CidrBlock: !Ref PrivateSubnetAZ1
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub '${AWS::StackName}PrivateAZ1'
        - Key: network
          Value: private
    Type: 'AWS::EC2::Subnet'
  RouteAssociationPrivateAZ1Default:
    Properties:
      SubnetId: !Ref PrivateNetAZ1
      RouteTableId: !Ref RouteTablePrivateAZ1
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  PublicNetAZ1:
    Properties:
      VpcId: !Ref VPCBase
      AvailabilityZone: !Select 
        - '0'
        - !If 
          - SetCustomAZ
          - !Ref CustomAZList
          - !GetAZs 
            Ref: 'AWS::Region'
      CidrBlock: !Ref PublicSubnetAZ1
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub '${AWS::StackName}PublicAZ1'
    Type: 'AWS::EC2::Subnet'
  RouteAssociationPublicAZ1Default:
    Properties:
      SubnetId: !Ref PublicNetAZ1
      RouteTableId: !Ref RouteTablePublic
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  RouteTablePrivateAZ1:
    Properties:
      VpcId: !Ref VPCBase
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub '${AWS::StackName}PrivateAZ1RT'
    Type: 'AWS::EC2::RouteTable'
  EIPNATAZ1:
    Properties:
      Domain: vpc
    Type: 'AWS::EC2::EIP'
  NATAZ1:
    Properties:
      AllocationId: !GetAtt 
        - EIPNATAZ1
        - AllocationId
      SubnetId: !Ref PublicNetAZ1
    Type: 'AWS::EC2::NatGateway'
    DependsOn: VGAIGWBase
  NATAZ1Route:
    Properties:
      RouteTableId: !Ref RouteTablePrivateAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATAZ1
    Type: 'AWS::EC2::Route'
  PrivateNetAZ2:
    Properties:
      VpcId: !Ref VPCBase
      AvailabilityZone: !Select 
        - '1'
        - !If 
          - SetCustomAZ
          - !Ref CustomAZList
          - !GetAZs 
            Ref: 'AWS::Region'
      CidrBlock: !Ref PrivateSubnetAZ2
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Join 
            - ''
            - - !If 
                - Create2AZs
                - !Ref 'AWS::NoValue'
                - DONOTUSE-
              - !Ref 'AWS::StackName'
              - PrivateAZ2
        - Key: network
          Value: private
    Type: 'AWS::EC2::Subnet'
  RouteAssociationPrivateAZ2Default:
    Properties:
      SubnetId: !Ref PrivateNetAZ2
      RouteTableId: !Ref RouteTablePrivateAZ2
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  PublicNetAZ2:
    Properties:
      VpcId: !Ref VPCBase
      AvailabilityZone: !Select 
        - '1'
        - !If 
          - SetCustomAZ
          - !Ref CustomAZList
          - !GetAZs 
            Ref: 'AWS::Region'
      CidrBlock: !Ref PublicSubnetAZ2
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Join 
            - ''
            - - !If 
                - Create2AZs
                - !Ref 'AWS::NoValue'
                - DONOTUSE-
              - !Ref 'AWS::StackName'
              - PublicAZ2
    Type: 'AWS::EC2::Subnet'
  RouteAssociationPublicAZ2Default:
    Properties:
      SubnetId: !Ref PublicNetAZ2
      RouteTableId: !Ref RouteTablePublic
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  RouteTablePrivateAZ2:
    Properties:
      VpcId: !Ref VPCBase
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub '${AWS::StackName}PrivateAZ2RT'
    Type: 'AWS::EC2::RouteTable'
  EIPNATAZ2:
    Properties:
      Domain: vpc
    Type: 'AWS::EC2::EIP'
    Condition: Create2AZs
  NATAZ2:
    Properties:
      AllocationId: !GetAtt 
        - EIPNATAZ2
        - AllocationId
      SubnetId: !Ref PublicNetAZ2
    Type: 'AWS::EC2::NatGateway'
    DependsOn: VGAIGWBase
    Condition: Create2AZs
  NATAZ2Route:
    Properties:
      RouteTableId: !Ref RouteTablePrivateAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATAZ2
    Type: 'AWS::EC2::Route'
    Condition: Create2AZs
  PrivateNetAZ3:
    Properties:
      VpcId: !Ref VPCBase
      AvailabilityZone: !Select 
        - '2'
        - !If 
          - SetCustomAZ
          - !Ref CustomAZList
          - !GetAZs 
            Ref: 'AWS::Region'
      CidrBlock: !Ref PrivateSubnetAZ3
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub '${AWS::StackName}PrivateAZ3'
        - Key: network
          Value: private
    Type: 'AWS::EC2::Subnet'
    Condition: Create3AZs
  RouteAssociationPrivateAZ3Default:
    Properties:
      SubnetId: !Ref PrivateNetAZ3
      RouteTableId: !Ref RouteTablePrivateAZ3
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: Create3AZs
  PublicNetAZ3:
    Properties:
      VpcId: !Ref VPCBase
      AvailabilityZone: !Select 
        - '2'
        - !If 
          - SetCustomAZ
          - !Ref CustomAZList
          - !GetAZs 
            Ref: 'AWS::Region'
      CidrBlock: !Ref PublicSubnetAZ3
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub '${AWS::StackName}PublicAZ3'
    Type: 'AWS::EC2::Subnet'
    Condition: Create3AZs
  RouteAssociationPublicAZ3Default:
    Properties:
      SubnetId: !Ref PublicNetAZ3
      RouteTableId: !Ref RouteTablePublic
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: Create3AZs
  RouteTablePrivateAZ3:
    Properties:
      VpcId: !Ref VPCBase
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub '${AWS::StackName}PrivateAZ3RT'
    Type: 'AWS::EC2::RouteTable'
    Condition: Create3AZs
  EIPNATAZ3:
    Properties:
      Domain: vpc
    Type: 'AWS::EC2::EIP'
    Condition: Create3AZs
  NATAZ3:
    Properties:
      AllocationId: !GetAtt 
        - EIPNATAZ3
        - AllocationId
      SubnetId: !Ref PublicNetAZ3
    Type: 'AWS::EC2::NatGateway'
    DependsOn: VGAIGWBase
    Condition: Create3AZs
  NATAZ3Route:
    Properties:
      RouteTableId: !Ref RouteTablePrivateAZ3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATAZ3
    Type: 'AWS::EC2::Route'
    Condition: Create3AZs
Outputs:
  RouteTablePublic:
    Value: !Ref RouteTablePublic
  SubnetPrivateAZ1:
    Value: !Ref PrivateNetAZ1
  RouteTablePrivateAZ1:
    Value: !Ref RouteTablePrivateAZ1
  SubnetPublicAZ1:
    Value: !Ref PublicNetAZ1
  ElasticIP1:
    Value: !Ref EIPNATAZ1
  SubnetPrivateAZ2:
    Value: !Ref PrivateNetAZ2
  RouteTablePrivateAZ2:
    Value: !Ref RouteTablePrivateAZ2
  SubnetPublicAZ2:
    Value: !Ref PublicNetAZ2
  ElasticIP2:
    Value: !Ref EIPNATAZ2
    Condition: Create2AZs
  SubnetPrivateAZ3:
    Value: !Ref PrivateNetAZ3
    Condition: Create3AZs
  RouteTablePrivateAZ3:
    Value: !Ref RouteTablePrivateAZ3
    Condition: Create3AZs
  SubnetPublicAZ3:
    Value: !Ref PublicNetAZ3
    Condition: Create3AZs
  ElasticIP3:
    Value: !Ref EIPNATAZ3
    Condition: Create3AZs
  VPCID:
    Value: !Ref VPCBase
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", VPCID ] ]
  VPNGateway:
    Condition: CreateVPNGateway
    Value: !Ref VPNGatewayResource
  DefaultSG:
    Value: !GetAtt 
      - VPCBase
      - DefaultSecurityGroup
  Environment:
    Value: !Ref Environment
  CIDRRange:
    Value: !Ref CIDRRange
  CidrBlockAssociations:
    Condition: SetSecondaryCIDR
    Value: !Join 
      - ','
      - !GetAtt 
        - VPCBase
        - CidrBlockAssociations
  PrivateSubnets:
    Value: !Join 
      - ','
      - - !Ref PrivateNetAZ1
        - !Ref PrivateNetAZ2
        - !If 
          - Create3AZs
          - !Ref PrivateNetAZ3
          - !Ref 'AWS::NoValue'
  PublicSubnets:
    Value: !Join 
      - ','
      - - !Ref PublicNetAZ1
        - !Ref PublicNetAZ2
        - !If 
          - Create3AZs
          - !Ref PublicNetAZ3
          - !Ref 'AWS::NoValue'
  Subnets:
    Value: !Join 
      - ','
      - - !Ref PrivateNetAZ1
        - !Ref PrivateNetAZ2
        - !If 
          - Create3AZs
          - !Ref PrivateNetAZ3
          - !Ref 'AWS::NoValue'
        - !Ref PublicNetAZ1
        - !Ref PublicNetAZ2
        - !If 
          - Create3AZs
          - !Ref PublicNetAZ3
          - !Ref 'AWS::NoValue'
  RouteTables:
    Value: !Join 
      - ','
      - - !Ref RouteTablePublic
        - !Ref RouteTablePrivateAZ1
        - !Ref RouteTablePrivateAZ2
        - !If 
          - Create3AZs
          - !Ref RouteTablePrivateAZ3
          - !Ref 'AWS::NoValue'
